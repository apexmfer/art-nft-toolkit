{
  "address": "0x2B7d9acD18E9E3eeB74cD20E91589671068137e5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payoutAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "totalSupply",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "projectSeed",
          "type": "bytes32"
        }
      ],
      "name": "DefinedProject",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "nonceUsed",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sigHash",
          "type": "bytes32"
        }
      ],
      "name": "MintedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "UpdatedMetadataURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintPrice",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMintPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payoutAddress",
          "type": "address"
        }
      ],
      "name": "UpdatedPayoutAddress",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "artProjects",
      "outputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "payoutAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "totalSupply",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "mintedCount",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "mintPrice",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "projectSeed",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "projectIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_artistAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "_totalSupply",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_mintPrice",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_projectSeed",
          "type": "bytes32"
        }
      ],
      "name": "defineProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "artistAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "totalSupply",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "projectSeed",
          "type": "bytes32"
        }
      ],
      "name": "getProjectId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getProjectIdFromTokenId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "nonce",
          "type": "uint16"
        }
      ],
      "name": "getTypeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_projectId",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "_nonce",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_secretMessage",
          "type": "bytes"
        }
      ],
      "name": "mintTokenFromSecretMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_projectId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "name": "modifyProjectMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_projectId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_mintPrice",
          "type": "uint256"
        }
      ],
      "name": "modifyProjectMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_projectId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_payoutAddress",
          "type": "address"
        }
      ],
      "name": "modifyProjectPayoutAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectIdLookup",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "signatureHasBeenUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usedSignatureHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d34dbc901d8139c99cb8afde97c07abcea7a16af675ba231b604cc94c17e083",
  "receipt": {
    "to": null,
    "from": "0x0DaAc8820EBcDccF034b3C1c9Ce7E7368b4Afe08",
    "contractAddress": "0x2B7d9acD18E9E3eeB74cD20E91589671068137e5",
    "transactionIndex": 73,
    "gasUsed": "4718595",
    "logsBloom": "0x
    "blockHash": "0x9658ea7ac785e2ed9b9066e10865a048d6f125a144274c87d7092aa32792aa8a",
    "transactionHash": "0x3d34dbc901d8139c99cb8afde97c07abcea7a16af675ba231b604cc94c17e083",
    "logs": [],
    "blockNumber": 7637325,
    "cumulativeGasUsed": "26018448",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e36f37a530a82084a87ea850b45216a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"projectSeed\",\"type\":\"bytes32\"}],\"name\":\"DefinedProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"nonceUsed\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sigHash\",\"type\":\"bytes32\"}],\"name\":\"MintedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"UpdatedMetadataURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatedMintPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"UpdatedPayoutAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"artProjects\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"mintedCount\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"projectSeed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"projectIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_projectSeed\",\"type\":\"bytes32\"}],\"name\":\"defineProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"totalSupply\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"projectSeed\",\"type\":\"bytes32\"}],\"name\":\"getProjectId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getProjectIdFromTokenId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"nonce\",\"type\":\"uint16\"}],\"name\":\"getTypeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"_nonce\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_secretMessage\",\"type\":\"bytes\"}],\"name\":\"mintTokenFromSecretMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_projectId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"modifyProjectMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_projectId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"modifyProjectMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_projectId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_payoutAddress\",\"type\":\"address\"}],\"name\":\"modifyProjectPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIdLookup\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"signatureHasBeenUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedSignatureHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DetroitLocalArt.sol\":\"DetroitLocalArt\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xa9ee8ba9953f4339e308abde06d64195b81852b5c605cfb738582a03ddf20099\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\",\"keccak256\":\"0x5b828be8178d098728c4d203af265981da6d6ef5ab2d620992ca962bf0c45885\",\"license\":\"Unlicense\"},\"contracts/DetroitLocalArt.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./BytesLib.sol\\\";\\n// Libraries\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\n \\n/*\\n\\nThis contract should be deployed as a proxy \\n\\n*/\\n\\ncontract DetroitLocalArt is ERC721Upgradeable, OwnableUpgradeable {\\n\\n    //each nft tokenid will be  [this constant * artProjectId + tokenId]\\n    uint16 immutable MAX_PROJECT_QUANTITY = 10000;\\n\\n\\n    struct ArtProject {\\n        address signerAddress;\\n        address payoutAddress;\\n        string metadataURI;\\n        uint16 totalSupply;  //must be less than or equal to MAX_PROJECT_QUANTITY   \\n        uint16 mintedCount;\\n        uint256 mintPrice;  \\n        bytes32 projectSeed; //generated by central server randomly \\n        uint256 projectIndex; //used for tokenId \\n      \\n    }   \\n\\n    event DefinedProject(bytes32 indexed projectId, address signerAddress, address payoutAddress, uint16 totalSupply, uint256 mintPrice, string metadataURI, bytes32 projectSeed);\\n    event UpdatedMintPrice(bytes32 indexed projectId, uint256 mintPrice);\\n    event UpdatedMetadataURI(bytes32 indexed projectId, string metadataURI); \\n    event UpdatedPayoutAddress(bytes32 indexed projectId, address payoutAddress);\\n \\n    \\n    event MintedToken(bytes32 indexed projectId, address indexed to, uint256 tokenId, uint16 nonceUsed, bytes32 sigHash);\\n\\n\\n    // projectId [hash] => ArtProject\\n    mapping(bytes32 => ArtProject) public artProjects;\\n\\n    mapping(bytes32 => bool) public usedSignatureHashes;\\n\\n    //projectIndex =? projectId\\n    mapping(uint256 => bytes32) public projectIdLookup;\\n\\n    uint16 projectCount;\\n    \\n \\n \\n\\n    modifier onlyOwnerOrSpecificArtist(address artist){\\n         require(_msgSender() == owner() || (   _msgSender() == artist) , \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n \\n    //see how artblocks uses name and sym\\n     constructor () public\\n        ERC721Upgradeable()\\n    {\\n         \\n      \\n    }\\n\\n\\n    function initialize() public initializer {\\n\\n        __Ownable_init();\\n        \\n        __ERC721_init(\\\"DetroitLocalArt\\\",\\\"DLA\\\");\\n\\n    }\\n\\n \\n\\n    function getDomainSeparator()\\n     internal\\n        view\\n        returns (bytes32){\\n               uint256 chainId;\\n                assembly {\\n                    chainId := chainid()\\n                }\\n \\n\\n        return\\n            keccak256(\\n                abi.encode(\\n                    // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\n                    keccak256(bytes(\\\"DetroitLocalArt\\\")),\\n                    keccak256(bytes(\\\"1.0\\\")),\\n                    chainId,\\n                    address(this) //proxy contract\\n                )\\n            );\\n\\n        }\\n\\n   \\n\\n\\n    function defineProject (\\n        address _signerAddress,  \\n        address _artistAddress,    \\n        string memory _metadataURI,\\n        uint16 _totalSupply,\\n        uint256 _mintPrice,\\n        bytes32 _projectSeed\\n    )  public onlyOwnerOrSpecificArtist(_artistAddress) {\\n\\n\\n        bytes32 projectId = getProjectId( _artistAddress, _totalSupply, _projectSeed );\\n\\n        require(artProjects[projectId].signerAddress == address(0),'Art project id already registered');\\n\\n        uint256 _projectIndex = projectCount++;\\n\\n        artProjects[projectId] = ArtProject({\\n            signerAddress: _signerAddress,\\n            payoutAddress: _artistAddress,\\n            metadataURI: _metadataURI,\\n            totalSupply: _totalSupply,\\n            mintedCount : 0,\\n            mintPrice: _mintPrice ,\\n            projectSeed: _projectSeed,\\n            projectIndex: _projectIndex\\n        });\\n\\n        projectIdLookup[_projectIndex] = projectId;\\n\\n        emit DefinedProject(projectId, _signerAddress,_artistAddress, _totalSupply, _mintPrice, _metadataURI, _projectSeed);\\n \\n\\n    }\\n\\n    function getProjectId(address artistAddress, uint16 totalSupply, bytes32 projectSeed) public returns (bytes32) {\\n        return keccak256(  \\n            abi.encode(\\n                artistAddress,\\n                totalSupply,\\n                projectSeed\\n            )\\n        );\\n    }\\n\\n\\n    function modifyProjectMetadata(\\n        bytes32 _projectId,\\n        string memory _metadataURI\\n    ) public onlyOwnerOrSpecificArtist(artProjects[_projectId].signerAddress) {\\n        artProjects[_projectId].metadataURI = _metadataURI;\\n    \\n        emit UpdatedMetadataURI(_projectId,_metadataURI);\\n    \\n    }\\n\\n    function modifyProjectMintPrice(\\n        bytes32 _projectId,\\n        uint256 _mintPrice\\n    ) public onlyOwnerOrSpecificArtist(artProjects[_projectId].signerAddress) {\\n        artProjects[_projectId].mintPrice = _mintPrice;\\n\\n        emit UpdatedMintPrice(_projectId, _mintPrice);\\n    \\n    }\\n\\n     function modifyProjectPayoutAddress(\\n        bytes32 _projectId,\\n        address _payoutAddress\\n    ) public onlyOwnerOrSpecificArtist(artProjects[_projectId].signerAddress) {\\n        artProjects[_projectId].payoutAddress = _payoutAddress;\\n\\n        emit UpdatedPayoutAddress(_projectId, _payoutAddress);\\n    \\n    }\\n \\n \\n\\n    /*\\n     A 'secret message' is a _project id and _nonce concatenated to a _secretCode and this is what we can give to people. our method will decode \\n\\n    */\\n\\n    function mintTokenFromSecretMessage( \\n        bytes memory _secretMessage\\n    ) public payable\\n    {\\n \\n        require (_secretMessage.length == 99,'signature length invalid');\\n\\n        bytes32 _projectId;\\n        uint16 _nonce;\\n    \\n        bytes memory _signature; //secret code \\n\\n    \\n\\n        assembly {\\n        _projectId := mload(add(_secretMessage, 0x20))\\n        _nonce := mload(add(_secretMessage, 0x22))           \\n        } \\n           \\n\\n        _signature = BytesLib.slice( _secretMessage, 34, 65 );\\n  \\n      \\n        _mintTokenTo(msg.sender,_projectId,_nonce,_signature);\\n    }\\n\\n\\n    function mintToken(\\n        bytes32 _projectId,\\n        uint16 _nonce,\\n        bytes memory _signature\\n    ) public payable\\n    {   \\n       _mintTokenTo(msg.sender,_projectId,_nonce,_signature);\\n    }\\n\\n\\n \\n    function _mintTokenTo(\\n        address _to,\\n        bytes32 _projectId,\\n        uint16 _nonce,\\n        bytes memory _signature\\n    ) internal \\n    {      \\n        \\n        uint256 _tokenId = (artProjects[_projectId].projectIndex * MAX_PROJECT_QUANTITY) + artProjects[_projectId].mintedCount;\\n\\n        artProjects[_projectId].mintedCount += 1;\\n\\n        require(artProjects[_projectId].mintedCount <= artProjects[_projectId].totalSupply, \\\"Total supply has been minted for this project.\\\");\\n\\n        require(signatureHasBeenUsed(_signature)==false,\\\"Code already used\\\");\\n        usedSignatureHashes[keccak256(_signature)] = true;\\n\\n        //make sure secret code ECrecovery of hash(projectId, nonce) == artist admin address  \\n        require(_validateSecretCode( artProjects[_projectId].signerAddress, _projectId, _nonce, _signature ), \\\"Signature invalid\\\");\\n        \\n       \\n        super._safeMint(_to, _tokenId);\\n\\n        //forward the eth to the artist account\\n        //perform this call at the end to mitigate re-entrancy exploits \\n        require(msg.value == artProjects[_projectId].mintPrice, \\\"Invalid payment for mint\\\");\\n        payable(artProjects[_projectId].payoutAddress).transfer(msg.value); //send funds to artist\\n        \\n        emit MintedToken(_projectId, _to, _tokenId, _nonce,keccak256(_signature));\\n    }\\n\\n    function signatureHasBeenUsed(\\n        bytes memory _signature\\n    ) public view returns (bool){\\n        return usedSignatureHashes[keccak256(_signature)];\\n    }\\n\\n    function _validateSecretCode(\\n        address signerAddress,\\n        bytes32 projectId,\\n        uint16 nonce,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n\\n        bytes32 typeHash = getTypeHash(projectId,nonce);\\n\\n        bytes32 dataHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), typeHash)\\n        );\\n\\n        return ECDSAUpgradeable.recover(  \\n            dataHash, signature\\n        ) == signerAddress;\\n    }\\n\\n\\n    function getTypeHash(bytes32 projectId, uint16 nonce) public view returns (bytes32){\\n        return keccak256( abi.encode( keccak256(\\n                        \\\"inputs(bytes32 projectId,uint16 nonce)\\\"\\n                        ), \\n                        projectId, \\n                        nonce ) );\\n    }\\n\\n     /**\\n     * @dev Returns an URI for a given token ID\\n     * Throws if the token ID does not exist. May return an empty string.\\n     * @param tokenId uint256 ID of the token to query\\n     */\\n    function tokenURI(uint256 tokenId) public override view returns (string memory) {\\n        require(_exists(tokenId));\\n\\n        bytes32 projectId = getProjectIdFromTokenId(tokenId);\\n\\n        return artProjects[projectId].metadataURI;\\n    }\\n\\n\\n\\n  \\n    function getProjectIdFromTokenId(uint256 tokenId) public view returns (bytes32){\\n\\n          uint256 projectIndex = tokenId/MAX_PROJECT_QUANTITY ;\\n\\n\\n          //test me thoroughly !\\n          return projectIdLookup[projectIndex];\\n    }\\n\\n\\n\\n}\",\"keccak256\":\"0xf0668438dd064b13a6df8a8b67d59e3e4cc7514034dd3d90765cf4694b4b98ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405261271061ffff1660809061ffff1681525034801561002157600080fd5b506080516154d761004460003960008181610db701526124de01526154d76000f3fe6080604052600436106101cd5760003560e01c80638d54a10c116100f7578063ae45bb1b11610095578063dddf96d611610064578063dddf96d6146106b4578063e985e9c5146106d0578063f2fde38b1461070d578063fcba710e14610736576101cd565b8063ae45bb1b146105e8578063b71ed56114610625578063b88d4fde1461064e578063c87b56dd14610677576101cd565b80639a1552df116100d15780639a1552df1461053d578063a22cb46514610559578063a5135a7414610582578063a6932b2a146105bf576101cd565b80638d54a10c146104aa5780638da5cb5b146104e757806395d89b4114610512576101cd565b806342842e0e1161016f578063715018a61161013e578063715018a614610416578063754abc241461042d5780638129fc1c1461045657806386e5fcdd1461046d576101cd565b806342842e0e146103365780635d89170d1461035f5780636352211e1461039c57806370a08231146103d9576101cd565b80630818e648116101ab5780630818e64814610277578063095ea7b3146102bb57806323b872dd146102e45780632d86ef6f1461030d576101cd565b806301ffc9a7146101d257806306fdde031461020f578063081812fc1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190613568565b610773565b60405161020691906135b0565b60405180910390f35b34801561021b57600080fd5b50610224610855565b6040516102319190613664565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c91906136bc565b6108e7565b60405161026e919061372a565b60405180910390f35b34801561028357600080fd5b5061029e6004803603810190610299919061377b565b61096c565b6040516102b29897969594939291906137e3565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190613894565b610a98565b005b3480156102f057600080fd5b5061030b600480360381019061030691906138d4565b610bb0565b005b34801561031957600080fd5b50610334600480360381019061032f9190613927565b610c10565b005b34801561034257600080fd5b5061035d600480360381019061035891906138d4565b610d92565b005b34801561036b57600080fd5b50610386600480360381019061038191906136bc565b610db2565b6040516103939190613967565b60405180910390f35b3480156103a857600080fd5b506103c360048036038101906103be91906136bc565b610e03565b6040516103d0919061372a565b60405180910390f35b3480156103e557600080fd5b5061040060048036038101906103fb9190613982565b610eb5565b60405161040d91906139af565b60405180910390f35b34801561042257600080fd5b5061042b610f6d565b005b34801561043957600080fd5b50610454600480360381019061044f9190613aff565b610ff5565b005b34801561046257600080fd5b5061046b61114d565b005b34801561047957600080fd5b50610494600480360381019061048f9190613b87565b611255565b6040516104a19190613967565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc919061377b565b6112aa565b6040516104de91906135b0565b60405180910390f35b3480156104f357600080fd5b506104fc6112ca565b604051610509919061372a565b60405180910390f35b34801561051e57600080fd5b506105276112f4565b6040516105349190613664565b60405180910390f35b61055760048036038101906105529190613c68565b611386565b005b34801561056557600080fd5b50610580600480360381019061057b9190613cdd565b6113fe565b005b34801561058e57600080fd5b506105a960048036038101906105a49190613c68565b611414565b6040516105b691906135b0565b60405180910390f35b3480156105cb57600080fd5b506105e660048036038101906105e19190613d1d565b611445565b005b3480156105f457600080fd5b5061060f600480360381019061060a9190613d5d565b61158d565b60405161061c9190613967565b60405180910390f35b34801561063157600080fd5b5061064c60048036038101906106479190613db0565b6115c3565b005b34801561065a57600080fd5b5061067560048036038101906106709190613e59565b61196c565b005b34801561068357600080fd5b5061069e600480360381019061069991906136bc565b6119ce565b6040516106ab9190613664565b60405180910390f35b6106ce60048036038101906106c99190613edc565b611a96565b005b3480156106dc57600080fd5b506106f760048036038101906106f29190613f4b565b611aa7565b60405161070491906135b0565b60405180910390f35b34801561071957600080fd5b50610734600480360381019061072f9190613982565b611b3b565b005b34801561074257600080fd5b5061075d600480360381019061075891906136bc565b611c33565b60405161076a9190613967565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061083e57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061084e575061084d82611c4b565b5b9050919050565b60606065805461086490613fba565b80601f016020809104026020016040519081016040528092919081815260200182805461089090613fba565b80156108dd5780601f106108b2576101008083540402835291602001916108dd565b820191906000526020600020905b8154815290600101906020018083116108c057829003601f168201915b5050505050905090565b60006108f282611cb5565b610931576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109289061405e565b60405180910390fd5b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60c96020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020180546109db90613fba565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0790613fba565b8015610a545780601f10610a2957610100808354040283529160200191610a54565b820191906000526020600020905b815481529060010190602001808311610a3757829003601f168201915b5050505050908060030160009054906101000a900461ffff16908060030160029054906101000a900461ffff16908060040154908060050154908060060154905088565b6000610aa382610e03565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b906140f0565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b33611d21565b73ffffffffffffffffffffffffffffffffffffffff161480610b625750610b6181610b5c611d21565b611aa7565b5b610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9890614182565b60405180910390fd5b610bab8383611d29565b505050565b610bc1610bbb611d21565b82611de2565b610c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf790614214565b60405180910390fd5b610c0b838383611ec0565b505050565b60c9600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c4f6112ca565b73ffffffffffffffffffffffffffffffffffffffff16610c6d611d21565b73ffffffffffffffffffffffffffffffffffffffff161480610cc157508073ffffffffffffffffffffffffffffffffffffffff16610ca9611d21565b73ffffffffffffffffffffffffffffffffffffffff16145b610d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf790614280565b60405180910390fd5b8160c9600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827f3833e45d14699086c62a94aa805cdb486f3d41948169c884edf13dbcf897337683604051610d85919061372a565b60405180910390a2505050565b610dad8383836040518060200160405280600081525061196c565b505050565b6000807f000000000000000000000000000000000000000000000000000000000000000061ffff1683610de591906142fe565b905060cb600082815260200190815260200160002054915050919050565b6000806067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea3906143a1565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1d90614433565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f75611d21565b73ffffffffffffffffffffffffffffffffffffffff16610f936112ca565b73ffffffffffffffffffffffffffffffffffffffff1614610fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe090614280565b60405180910390fd5b610ff36000612127565b565b60c9600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166110346112ca565b73ffffffffffffffffffffffffffffffffffffffff16611052611d21565b73ffffffffffffffffffffffffffffffffffffffff1614806110a657508073ffffffffffffffffffffffffffffffffffffffff1661108e611d21565b73ffffffffffffffffffffffffffffffffffffffff16145b6110e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110dc90614280565b60405180910390fd5b8160c96000858152602001908152602001600020600201908051906020019061110f929190613459565b50827ff4eeed15314036815e11c8066165d190d98c781526371d82124d3180c7d643e9836040516111409190613664565b60405180910390a2505050565b600061115960016121ed565b9050801561117d576001600060016101000a81548160ff0219169083151502179055505b6111856122dd565b6111f96040518060400160405280600f81526020017f446574726f69744c6f63616c41727400000000000000000000000000000000008152506040518060400160405280600381526020017f444c410000000000000000000000000000000000000000000000000000000000815250612336565b80156112525760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161124991906144a5565b60405180910390a15b50565b60007fbb74bfc0cab13a6451fe94dacc112ee8bc07ee15641a20757bf5498310869cad838360405160200161128c939291906144c0565b60405160208183030381529060405280519060200120905092915050565b60ca6020528060005260406000206000915054906101000a900460ff1681565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606066805461130390613fba565b80601f016020809104026020016040519081016040528092919081815260200182805461132f90613fba565b801561137c5780601f106113515761010080835404028352916020019161137c565b820191906000526020600020905b81548152906001019060200180831161135f57829003601f168201915b5050505050905090565b60638151146113ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c190614543565b60405180910390fd5b600080606060208401519250602284015191506113ea8460226041612393565b90506113f8338484846124b1565b50505050565b611410611409611d21565b8383612852565b5050565b600060ca60008380519060200120815260200190815260200160002060009054906101000a900460ff169050919050565b60c9600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114846112ca565b73ffffffffffffffffffffffffffffffffffffffff166114a2611d21565b73ffffffffffffffffffffffffffffffffffffffff1614806114f657508073ffffffffffffffffffffffffffffffffffffffff166114de611d21565b73ffffffffffffffffffffffffffffffffffffffff16145b611535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152c90614280565b60405180910390fd5b8160c9600085815260200190815260200160002060040181905550827f8bf28d99366bdadee1faf93b04fb78aef0a2dbc2a916f000c84ca16cad2cd75b8360405161158091906139af565b60405180910390a2505050565b60008383836040516020016115a493929190614563565b6040516020818303038152906040528051906020012090509392505050565b846115cc6112ca565b73ffffffffffffffffffffffffffffffffffffffff166115ea611d21565b73ffffffffffffffffffffffffffffffffffffffff16148061163e57508073ffffffffffffffffffffffffffffffffffffffff16611626611d21565b73ffffffffffffffffffffffffffffffffffffffff16145b61167d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167490614280565b60405180910390fd5b600061168a87868561158d565b9050600073ffffffffffffffffffffffffffffffffffffffff1660c9600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611731576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117289061460c565b60405180910390fd5b600060cc600081819054906101000a900461ffff16809291906117539061462c565b91906101000a81548161ffff021916908361ffff16021790555061ffff1690506040518061010001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018761ffff168152602001600061ffff1681526020018681526020018581526020018281525060c9600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061189f929190613459565b5060608201518160030160006101000a81548161ffff021916908361ffff16021790555060808201518160030160026101000a81548161ffff021916908361ffff16021790555060a0820151816004015560c0820151816005015560e082015181600601559050508160cb600083815260200190815260200160002081905550817f7677ec20b7e77961879d69447f71a0dec6b633f3f1c857c8125138b7704a16e88a8a89898c8a60405161195996959493929190614657565b60405180910390a2505050505050505050565b61197d611977611d21565b83611de2565b6119bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b390614214565b60405180910390fd5b6119c8848484846129bf565b50505050565b60606119d982611cb5565b6119e257600080fd5b60006119ed83610db2565b905060c960008281526020019081526020016000206002018054611a1090613fba565b80601f0160208091040260200160405190810160405280929190818152602001828054611a3c90613fba565b8015611a895780601f10611a5e57610100808354040283529160200191611a89565b820191906000526020600020905b815481529060010190602001808311611a6c57829003601f168201915b5050505050915050919050565b611aa2338484846124b1565b505050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611b43611d21565b73ffffffffffffffffffffffffffffffffffffffff16611b616112ca565b73ffffffffffffffffffffffffffffffffffffffff1614611bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bae90614280565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1e90614731565b60405180910390fd5b611c3081612127565b50565b60cb6020528060005260406000206000915090505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d9c83610e03565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611ded82611cb5565b611e2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e23906147c3565b60405180910390fd5b6000611e3783610e03565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e795750611e788185611aa7565b5b80611eb757508373ffffffffffffffffffffffffffffffffffffffff16611e9f846108e7565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611ee082610e03565b73ffffffffffffffffffffffffffffffffffffffff1614611f36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2d90614855565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9d906148e7565b60405180910390fd5b611fb1838383612a1b565b611fbc600082611d29565b6001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461200c9190614907565b925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612063919061493b565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612122838383612a20565b505050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060019054906101000a900460ff16156122645760018260ff1614801561221c575061221a30612a25565b155b61225b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225290614a03565b60405180910390fd5b600090506122d8565b8160ff1660008054906101000a900460ff1660ff16106122b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b090614a03565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff1661232c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232390614a95565b60405180910390fd5b612334612a48565b565b600060019054906101000a900460ff16612385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237c90614a95565b60405180910390fd5b61238f8282612aa9565b5050565b606081601f836123a3919061493b565b10156123e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123db90614b01565b60405180910390fd5b81836123f0919061493b565b84511015612433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242a90614b6d565b60405180910390fd5b606082156000811461245457604051915060008252602082016040526124a5565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156124925780518352602083019250602081019050612475565b50868552601f19601f8301166040525050505b50809150509392505050565b600060c9600085815260200190815260200160002060030160029054906101000a900461ffff1661ffff167f000000000000000000000000000000000000000000000000000000000000000061ffff1660c96000878152602001908152602001600020600601546125229190614b8d565b61252c919061493b565b9050600160c9600086815260200190815260200160002060030160028282829054906101000a900461ffff166125629190614be7565b92506101000a81548161ffff021916908361ffff16021790555060c9600085815260200190815260200160002060030160009054906101000a900461ffff1661ffff1660c9600086815260200190815260200160002060030160029054906101000a900461ffff1661ffff16111561260f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260690614c91565b60405180910390fd5b6000151561261c83611414565b15151461265e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265590614cfd565b60405180910390fd5b600160ca60008480519060200120815260200190815260200160002060006101000a81548160ff0219169083151502179055506126d360c9600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858585612b2a565b612712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270990614d69565b60405180910390fd5b61271c8582612bb1565b60c96000858152602001908152602001600020600401543414612774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276b90614dd5565b60405180910390fd5b60c9600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156127f0573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff16847f858f7f381d57a58f2e65ea21be7a4da2bd2f3937ea0ceba485140ba8719efb048386868051906020012060405161284393929190614df5565b60405180910390a35050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156128c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b890614e78565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516129b291906135b0565b60405180910390a3505050565b6129ca848484611ec0565b6129d684848484612bcf565b612a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0c90614f0a565b60405180910390fd5b50505050565b505050565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8e90614a95565b60405180910390fd5b612aa7612aa2611d21565b612127565b565b600060019054906101000a900460ff16612af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aef90614a95565b60405180910390fd5b8160659080519060200190612b0e929190613459565b508060669080519060200190612b25929190613459565b505050565b600080612b378585611255565b90506000612b43612d66565b82604051602001612b55929190614fa2565b6040516020818303038152906040528051906020012090508673ffffffffffffffffffffffffffffffffffffffff16612b8e8286612e39565b73ffffffffffffffffffffffffffffffffffffffff161492505050949350505050565b612bcb828260405180602001604052806000815250612e60565b5050565b6000612bf08473ffffffffffffffffffffffffffffffffffffffff16612a25565b15612d59578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612c19611d21565b8786866040518563ffffffff1660e01b8152600401612c3b949392919061502e565b602060405180830381600087803b158015612c5557600080fd5b505af1925050508015612c8657506040513d601f19601f82011682018060405250810190612c83919061508f565b60015b612d09573d8060008114612cb6576040519150601f19603f3d011682016040523d82523d6000602084013e612cbb565b606091505b50600081511415612d01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf890614f0a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612d5e565b600190505b949350505050565b6000804690507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600f81526020017f446574726f69744c6f63616c4172740000000000000000000000000000000000815250805190602001206040518060400160405280600381526020017f312e300000000000000000000000000000000000000000000000000000000000815250805190602001208330604051602001612e1d9594939291906150f7565b6040516020818303038152906040528051906020012091505090565b6000806000612e488585612ebb565b91509150612e5581612f3e565b819250505092915050565b612e6a8383613113565b612e776000848484612bcf565b612eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ead90614f0a565b60405180910390fd5b505050565b600080604183511415612efd5760008060006020860151925060408601519150606086015160001a9050612ef1878285856132ed565b94509450505050612f37565b604083511415612f2e576000806020850151915060408501519050612f238683836133fa565b935093505050612f37565b60006002915091505b9250929050565b60006004811115612f5257612f5161514a565b5b816004811115612f6557612f6461514a565b5b1415612f7057613110565b60016004811115612f8457612f8361514a565b5b816004811115612f9757612f9661514a565b5b1415612fd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fcf906151c5565b60405180910390fd5b60026004811115612fec57612feb61514a565b5b816004811115612fff57612ffe61514a565b5b1415613040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161303790615231565b60405180910390fd5b600360048111156130545761305361514a565b5b8160048111156130675761306661514a565b5b14156130a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161309f906152c3565b60405180910390fd5b6004808111156130bb576130ba61514a565b5b8160048111156130ce576130cd61514a565b5b141561310f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161310690615355565b60405180910390fd5b5b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317a906153c1565b60405180910390fd5b61318c81611cb5565b156131cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131c39061542d565b60405180910390fd5b6131d860008383612a1b565b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613228919061493b565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46132e960008383612a20565b5050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156133285760006003915091506133f1565b601b8560ff16141580156133405750601c8560ff1614155b156133525760006004915091506133f1565b600060018787878760405160008152602001604052604051613377949392919061545c565b6020604051602081039080840390855afa158015613399573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156133e8576000600192509250506133f1565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c61343d919061493b565b905061344b878288856132ed565b935093505050935093915050565b82805461346590613fba565b90600052602060002090601f01602090048101928261348757600085556134ce565b82601f106134a057805160ff19168380011785556134ce565b828001600101855582156134ce579182015b828111156134cd5782518255916020019190600101906134b2565b5b5090506134db91906134df565b5090565b5b808211156134f85760008160009055506001016134e0565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61354581613510565b811461355057600080fd5b50565b6000813590506135628161353c565b92915050565b60006020828403121561357e5761357d613506565b5b600061358c84828501613553565b91505092915050565b60008115159050919050565b6135aa81613595565b82525050565b60006020820190506135c560008301846135a1565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156136055780820151818401526020810190506135ea565b83811115613614576000848401525b50505050565b6000601f19601f8301169050919050565b6000613636826135cb565b61364081856135d6565b93506136508185602086016135e7565b6136598161361a565b840191505092915050565b6000602082019050818103600083015261367e818461362b565b905092915050565b6000819050919050565b61369981613686565b81146136a457600080fd5b50565b6000813590506136b681613690565b92915050565b6000602082840312156136d2576136d1613506565b5b60006136e0848285016136a7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613714826136e9565b9050919050565b61372481613709565b82525050565b600060208201905061373f600083018461371b565b92915050565b6000819050919050565b61375881613745565b811461376357600080fd5b50565b6000813590506137758161374f565b92915050565b60006020828403121561379157613790613506565b5b600061379f84828501613766565b91505092915050565b600061ffff82169050919050565b6137bf816137a8565b82525050565b6137ce81613686565b82525050565b6137dd81613745565b82525050565b6000610100820190506137f9600083018b61371b565b613806602083018a61371b565b8181036040830152613818818961362b565b905061382760608301886137b6565b61383460808301876137b6565b61384160a08301866137c5565b61384e60c08301856137d4565b61385b60e08301846137c5565b9998505050505050505050565b61387181613709565b811461387c57600080fd5b50565b60008135905061388e81613868565b92915050565b600080604083850312156138ab576138aa613506565b5b60006138b98582860161387f565b92505060206138ca858286016136a7565b9150509250929050565b6000806000606084860312156138ed576138ec613506565b5b60006138fb8682870161387f565b935050602061390c8682870161387f565b925050604061391d868287016136a7565b9150509250925092565b6000806040838503121561393e5761393d613506565b5b600061394c85828601613766565b925050602061395d8582860161387f565b9150509250929050565b600060208201905061397c60008301846137d4565b92915050565b60006020828403121561399857613997613506565b5b60006139a68482850161387f565b91505092915050565b60006020820190506139c460008301846137c5565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613a0c8261361a565b810181811067ffffffffffffffff82111715613a2b57613a2a6139d4565b5b80604052505050565b6000613a3e6134fc565b9050613a4a8282613a03565b919050565b600067ffffffffffffffff821115613a6a57613a696139d4565b5b613a738261361a565b9050602081019050919050565b82818337600083830152505050565b6000613aa2613a9d84613a4f565b613a34565b905082815260208101848484011115613abe57613abd6139cf565b5b613ac9848285613a80565b509392505050565b600082601f830112613ae657613ae56139ca565b5b8135613af6848260208601613a8f565b91505092915050565b60008060408385031215613b1657613b15613506565b5b6000613b2485828601613766565b925050602083013567ffffffffffffffff811115613b4557613b4461350b565b5b613b5185828601613ad1565b9150509250929050565b613b64816137a8565b8114613b6f57600080fd5b50565b600081359050613b8181613b5b565b92915050565b60008060408385031215613b9e57613b9d613506565b5b6000613bac85828601613766565b9250506020613bbd85828601613b72565b9150509250929050565b600067ffffffffffffffff821115613be257613be16139d4565b5b613beb8261361a565b9050602081019050919050565b6000613c0b613c0684613bc7565b613a34565b905082815260208101848484011115613c2757613c266139cf565b5b613c32848285613a80565b509392505050565b600082601f830112613c4f57613c4e6139ca565b5b8135613c5f848260208601613bf8565b91505092915050565b600060208284031215613c7e57613c7d613506565b5b600082013567ffffffffffffffff811115613c9c57613c9b61350b565b5b613ca884828501613c3a565b91505092915050565b613cba81613595565b8114613cc557600080fd5b50565b600081359050613cd781613cb1565b92915050565b60008060408385031215613cf457613cf3613506565b5b6000613d028582860161387f565b9250506020613d1385828601613cc8565b9150509250929050565b60008060408385031215613d3457613d33613506565b5b6000613d4285828601613766565b9250506020613d53858286016136a7565b9150509250929050565b600080600060608486031215613d7657613d75613506565b5b6000613d848682870161387f565b9350506020613d9586828701613b72565b9250506040613da686828701613766565b9150509250925092565b60008060008060008060c08789031215613dcd57613dcc613506565b5b6000613ddb89828a0161387f565b9650506020613dec89828a0161387f565b955050604087013567ffffffffffffffff811115613e0d57613e0c61350b565b5b613e1989828a01613ad1565b9450506060613e2a89828a01613b72565b9350506080613e3b89828a016136a7565b92505060a0613e4c89828a01613766565b9150509295509295509295565b60008060008060808587031215613e7357613e72613506565b5b6000613e818782880161387f565b9450506020613e928782880161387f565b9350506040613ea3878288016136a7565b925050606085013567ffffffffffffffff811115613ec457613ec361350b565b5b613ed087828801613c3a565b91505092959194509250565b600080600060608486031215613ef557613ef4613506565b5b6000613f0386828701613766565b9350506020613f1486828701613b72565b925050604084013567ffffffffffffffff811115613f3557613f3461350b565b5b613f4186828701613c3a565b9150509250925092565b60008060408385031215613f6257613f61613506565b5b6000613f708582860161387f565b9250506020613f818582860161387f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613fd257607f821691505b60208210811415613fe657613fe5613f8b565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614048602c836135d6565b915061405382613fec565b604082019050919050565b600060208201905081810360008301526140778161403b565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006140da6021836135d6565b91506140e58261407e565b604082019050919050565b60006020820190508181036000830152614109816140cd565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b600061416c6038836135d6565b915061417782614110565b604082019050919050565b6000602082019050818103600083015261419b8161415f565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006141fe6031836135d6565b9150614209826141a2565b604082019050919050565b6000602082019050818103600083015261422d816141f1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061426a6020836135d6565b915061427582614234565b602082019050919050565b600060208201905081810360008301526142998161425d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061430982613686565b915061431483613686565b925082614324576143236142a0565b5b828204905092915050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b600061438b6029836135d6565b91506143968261432f565b604082019050919050565b600060208201905081810360008301526143ba8161437e565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600061441d602a836135d6565b9150614428826143c1565b604082019050919050565b6000602082019050818103600083015261444c81614410565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061448f61448a61448584614453565b61446a565b61445d565b9050919050565b61449f81614474565b82525050565b60006020820190506144ba6000830184614496565b92915050565b60006060820190506144d560008301866137d4565b6144e260208301856137d4565b6144ef60408301846137b6565b949350505050565b7f7369676e6174757265206c656e67746820696e76616c69640000000000000000600082015250565b600061452d6018836135d6565b9150614538826144f7565b602082019050919050565b6000602082019050818103600083015261455c81614520565b9050919050565b6000606082019050614578600083018661371b565b61458560208301856137b6565b61459260408301846137d4565b949350505050565b7f4172742070726f6a65637420696420616c72656164792072656769737465726560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006145f66021836135d6565b91506146018261459a565b604082019050919050565b60006020820190508181036000830152614625816145e9565b9050919050565b6000614637826137a8565b915061ffff82141561464c5761464b6142cf565b5b600182019050919050565b600060c08201905061466c600083018961371b565b614679602083018861371b565b61468660408301876137b6565b61469360608301866137c5565b81810360808301526146a5818561362b565b90506146b460a08301846137d4565b979650505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061471b6026836135d6565b9150614726826146bf565b604082019050919050565b6000602082019050818103600083015261474a8161470e565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006147ad602c836135d6565b91506147b882614751565b604082019050919050565b600060208201905081810360008301526147dc816147a0565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061483f6025836135d6565b915061484a826147e3565b604082019050919050565b6000602082019050818103600083015261486e81614832565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006148d16024836135d6565b91506148dc82614875565b604082019050919050565b60006020820190508181036000830152614900816148c4565b9050919050565b600061491282613686565b915061491d83613686565b9250828210156149305761492f6142cf565b5b828203905092915050565b600061494682613686565b915061495183613686565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614986576149856142cf565b5b828201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006149ed602e836135d6565b91506149f882614991565b604082019050919050565b60006020820190508181036000830152614a1c816149e0565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614a7f602b836135d6565b9150614a8a82614a23565b604082019050919050565b60006020820190508181036000830152614aae81614a72565b9050919050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000614aeb600e836135d6565b9150614af682614ab5565b602082019050919050565b60006020820190508181036000830152614b1a81614ade565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b6000614b576011836135d6565b9150614b6282614b21565b602082019050919050565b60006020820190508181036000830152614b8681614b4a565b9050919050565b6000614b9882613686565b9150614ba383613686565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614bdc57614bdb6142cf565b5b828202905092915050565b6000614bf2826137a8565b9150614bfd836137a8565b92508261ffff03821115614c1457614c136142cf565b5b828201905092915050565b7f546f74616c20737570706c7920686173206265656e206d696e74656420666f7260008201527f20746869732070726f6a6563742e000000000000000000000000000000000000602082015250565b6000614c7b602e836135d6565b9150614c8682614c1f565b604082019050919050565b60006020820190508181036000830152614caa81614c6e565b9050919050565b7f436f646520616c72656164792075736564000000000000000000000000000000600082015250565b6000614ce76011836135d6565b9150614cf282614cb1565b602082019050919050565b60006020820190508181036000830152614d1681614cda565b9050919050565b7f5369676e617475726520696e76616c6964000000000000000000000000000000600082015250565b6000614d536011836135d6565b9150614d5e82614d1d565b602082019050919050565b60006020820190508181036000830152614d8281614d46565b9050919050565b7f496e76616c6964207061796d656e7420666f72206d696e740000000000000000600082015250565b6000614dbf6018836135d6565b9150614dca82614d89565b602082019050919050565b60006020820190508181036000830152614dee81614db2565b9050919050565b6000606082019050614e0a60008301866137c5565b614e1760208301856137b6565b614e2460408301846137d4565b949350505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614e626019836135d6565b9150614e6d82614e2c565b602082019050919050565b60006020820190508181036000830152614e9181614e55565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614ef46032836135d6565b9150614eff82614e98565b604082019050919050565b60006020820190508181036000830152614f2381614ee7565b9050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000614f6b600283614f2a565b9150614f7682614f35565b600282019050919050565b6000819050919050565b614f9c614f9782613745565b614f81565b82525050565b6000614fad82614f5e565b9150614fb98285614f8b565b602082019150614fc98284614f8b565b6020820191508190509392505050565b600081519050919050565b600082825260208201905092915050565b600061500082614fd9565b61500a8185614fe4565b935061501a8185602086016135e7565b6150238161361a565b840191505092915050565b6000608082019050615043600083018761371b565b615050602083018661371b565b61505d60408301856137c5565b818103606083015261506f8184614ff5565b905095945050505050565b6000815190506150898161353c565b92915050565b6000602082840312156150a5576150a4613506565b5b60006150b38482850161507a565b91505092915050565b6000819050919050565b60006150e16150dc6150d7846150bc565b61446a565b613686565b9050919050565b6150f1816150c6565b82525050565b600060a08201905061510c60008301886150e8565b61511960208301876137d4565b61512660408301866137d4565b61513360608301856137c5565b615140608083018461371b565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006151af6018836135d6565b91506151ba82615179565b602082019050919050565b600060208201905081810360008301526151de816151a2565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061521b601f836135d6565b9150615226826151e5565b602082019050919050565b6000602082019050818103600083015261524a8161520e565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006152ad6022836135d6565b91506152b882615251565b604082019050919050565b600060208201905081810360008301526152dc816152a0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061533f6022836135d6565b915061534a826152e3565b604082019050919050565b6000602082019050818103600083015261536e81615332565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006153ab6020836135d6565b91506153b682615375565b602082019050919050565b600060208201905081810360008301526153da8161539e565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615417601c836135d6565b9150615422826153e1565b602082019050919050565b600060208201905081810360008301526154468161540a565b9050919050565b6154568161445d565b82525050565b600060808201905061547160008301876137d4565b61547e602083018661544d565b61548b60408301856137d4565b61549860608301846137d4565b9594505050505056fea26469706673582212202dbdc8a4f13ec8694bbc05854950ecb39110c364135fc87607ed652fd79f2b4e64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80638d54a10c116100f7578063ae45bb1b11610095578063dddf96d611610064578063dddf96d6146106b4578063e985e9c5146106d0578063f2fde38b1461070d578063fcba710e14610736576101cd565b8063ae45bb1b146105e8578063b71ed56114610625578063b88d4fde1461064e578063c87b56dd14610677576101cd565b80639a1552df116100d15780639a1552df1461053d578063a22cb46514610559578063a5135a7414610582578063a6932b2a146105bf576101cd565b80638d54a10c146104aa5780638da5cb5b146104e757806395d89b4114610512576101cd565b806342842e0e1161016f578063715018a61161013e578063715018a614610416578063754abc241461042d5780638129fc1c1461045657806386e5fcdd1461046d576101cd565b806342842e0e146103365780635d89170d1461035f5780636352211e1461039c57806370a08231146103d9576101cd565b80630818e648116101ab5780630818e64814610277578063095ea7b3146102bb57806323b872dd146102e45780632d86ef6f1461030d576101cd565b806301ffc9a7146101d257806306fdde031461020f578063081812fc1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190613568565b610773565b60405161020691906135b0565b60405180910390f35b34801561021b57600080fd5b50610224610855565b6040516102319190613664565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c91906136bc565b6108e7565b60405161026e919061372a565b60405180910390f35b34801561028357600080fd5b5061029e6004803603810190610299919061377b565b61096c565b6040516102b29897969594939291906137e3565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190613894565b610a98565b005b3480156102f057600080fd5b5061030b600480360381019061030691906138d4565b610bb0565b005b34801561031957600080fd5b50610334600480360381019061032f9190613927565b610c10565b005b34801561034257600080fd5b5061035d600480360381019061035891906138d4565b610d92565b005b34801561036b57600080fd5b50610386600480360381019061038191906136bc565b610db2565b6040516103939190613967565b60405180910390f35b3480156103a857600080fd5b506103c360048036038101906103be91906136bc565b610e03565b6040516103d0919061372a565b60405180910390f35b3480156103e557600080fd5b5061040060048036038101906103fb9190613982565b610eb5565b60405161040d91906139af565b60405180910390f35b34801561042257600080fd5b5061042b610f6d565b005b34801561043957600080fd5b50610454600480360381019061044f9190613aff565b610ff5565b005b34801561046257600080fd5b5061046b61114d565b005b34801561047957600080fd5b50610494600480360381019061048f9190613b87565b611255565b6040516104a19190613967565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc919061377b565b6112aa565b6040516104de91906135b0565b60405180910390f35b3480156104f357600080fd5b506104fc6112ca565b604051610509919061372a565b60405180910390f35b34801561051e57600080fd5b506105276112f4565b6040516105349190613664565b60405180910390f35b61055760048036038101906105529190613c68565b611386565b005b34801561056557600080fd5b50610580600480360381019061057b9190613cdd565b6113fe565b005b34801561058e57600080fd5b506105a960048036038101906105a49190613c68565b611414565b6040516105b691906135b0565b60405180910390f35b3480156105cb57600080fd5b506105e660048036038101906105e19190613d1d565b611445565b005b3480156105f457600080fd5b5061060f600480360381019061060a9190613d5d565b61158d565b60405161061c9190613967565b60405180910390f35b34801561063157600080fd5b5061064c60048036038101906106479190613db0565b6115c3565b005b34801561065a57600080fd5b5061067560048036038101906106709190613e59565b61196c565b005b34801561068357600080fd5b5061069e600480360381019061069991906136bc565b6119ce565b6040516106ab9190613664565b60405180910390f35b6106ce60048036038101906106c99190613edc565b611a96565b005b3480156106dc57600080fd5b506106f760048036038101906106f29190613f4b565b611aa7565b60405161070491906135b0565b60405180910390f35b34801561071957600080fd5b50610734600480360381019061072f9190613982565b611b3b565b005b34801561074257600080fd5b5061075d600480360381019061075891906136bc565b611c33565b60405161076a9190613967565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061083e57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061084e575061084d82611c4b565b5b9050919050565b60606065805461086490613fba565b80601f016020809104026020016040519081016040528092919081815260200182805461089090613fba565b80156108dd5780601f106108b2576101008083540402835291602001916108dd565b820191906000526020600020905b8154815290600101906020018083116108c057829003601f168201915b5050505050905090565b60006108f282611cb5565b610931576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109289061405e565b60405180910390fd5b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60c96020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020180546109db90613fba565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0790613fba565b8015610a545780601f10610a2957610100808354040283529160200191610a54565b820191906000526020600020905b815481529060010190602001808311610a3757829003601f168201915b5050505050908060030160009054906101000a900461ffff16908060030160029054906101000a900461ffff16908060040154908060050154908060060154905088565b6000610aa382610e03565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b906140f0565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b33611d21565b73ffffffffffffffffffffffffffffffffffffffff161480610b625750610b6181610b5c611d21565b611aa7565b5b610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9890614182565b60405180910390fd5b610bab8383611d29565b505050565b610bc1610bbb611d21565b82611de2565b610c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf790614214565b60405180910390fd5b610c0b838383611ec0565b505050565b60c9600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c4f6112ca565b73ffffffffffffffffffffffffffffffffffffffff16610c6d611d21565b73ffffffffffffffffffffffffffffffffffffffff161480610cc157508073ffffffffffffffffffffffffffffffffffffffff16610ca9611d21565b73ffffffffffffffffffffffffffffffffffffffff16145b610d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf790614280565b60405180910390fd5b8160c9600085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550827f3833e45d14699086c62a94aa805cdb486f3d41948169c884edf13dbcf897337683604051610d85919061372a565b60405180910390a2505050565b610dad8383836040518060200160405280600081525061196c565b505050565b6000807f000000000000000000000000000000000000000000000000000000000000000061ffff1683610de591906142fe565b905060cb600082815260200190815260200160002054915050919050565b6000806067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea3906143a1565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1d90614433565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f75611d21565b73ffffffffffffffffffffffffffffffffffffffff16610f936112ca565b73ffffffffffffffffffffffffffffffffffffffff1614610fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe090614280565b60405180910390fd5b610ff36000612127565b565b60c9600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166110346112ca565b73ffffffffffffffffffffffffffffffffffffffff16611052611d21565b73ffffffffffffffffffffffffffffffffffffffff1614806110a657508073ffffffffffffffffffffffffffffffffffffffff1661108e611d21565b73ffffffffffffffffffffffffffffffffffffffff16145b6110e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110dc90614280565b60405180910390fd5b8160c96000858152602001908152602001600020600201908051906020019061110f929190613459565b50827ff4eeed15314036815e11c8066165d190d98c781526371d82124d3180c7d643e9836040516111409190613664565b60405180910390a2505050565b600061115960016121ed565b9050801561117d576001600060016101000a81548160ff0219169083151502179055505b6111856122dd565b6111f96040518060400160405280600f81526020017f446574726f69744c6f63616c41727400000000000000000000000000000000008152506040518060400160405280600381526020017f444c410000000000000000000000000000000000000000000000000000000000815250612336565b80156112525760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161124991906144a5565b60405180910390a15b50565b60007fbb74bfc0cab13a6451fe94dacc112ee8bc07ee15641a20757bf5498310869cad838360405160200161128c939291906144c0565b60405160208183030381529060405280519060200120905092915050565b60ca6020528060005260406000206000915054906101000a900460ff1681565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606066805461130390613fba565b80601f016020809104026020016040519081016040528092919081815260200182805461132f90613fba565b801561137c5780601f106113515761010080835404028352916020019161137c565b820191906000526020600020905b81548152906001019060200180831161135f57829003601f168201915b5050505050905090565b60638151146113ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c190614543565b60405180910390fd5b600080606060208401519250602284015191506113ea8460226041612393565b90506113f8338484846124b1565b50505050565b611410611409611d21565b8383612852565b5050565b600060ca60008380519060200120815260200190815260200160002060009054906101000a900460ff169050919050565b60c9600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114846112ca565b73ffffffffffffffffffffffffffffffffffffffff166114a2611d21565b73ffffffffffffffffffffffffffffffffffffffff1614806114f657508073ffffffffffffffffffffffffffffffffffffffff166114de611d21565b73ffffffffffffffffffffffffffffffffffffffff16145b611535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152c90614280565b60405180910390fd5b8160c9600085815260200190815260200160002060040181905550827f8bf28d99366bdadee1faf93b04fb78aef0a2dbc2a916f000c84ca16cad2cd75b8360405161158091906139af565b60405180910390a2505050565b60008383836040516020016115a493929190614563565b6040516020818303038152906040528051906020012090509392505050565b846115cc6112ca565b73ffffffffffffffffffffffffffffffffffffffff166115ea611d21565b73ffffffffffffffffffffffffffffffffffffffff16148061163e57508073ffffffffffffffffffffffffffffffffffffffff16611626611d21565b73ffffffffffffffffffffffffffffffffffffffff16145b61167d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167490614280565b60405180910390fd5b600061168a87868561158d565b9050600073ffffffffffffffffffffffffffffffffffffffff1660c9600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611731576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117289061460c565b60405180910390fd5b600060cc600081819054906101000a900461ffff16809291906117539061462c565b91906101000a81548161ffff021916908361ffff16021790555061ffff1690506040518061010001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018761ffff168152602001600061ffff1681526020018681526020018581526020018281525060c9600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061189f929190613459565b5060608201518160030160006101000a81548161ffff021916908361ffff16021790555060808201518160030160026101000a81548161ffff021916908361ffff16021790555060a0820151816004015560c0820151816005015560e082015181600601559050508160cb600083815260200190815260200160002081905550817f7677ec20b7e77961879d69447f71a0dec6b633f3f1c857c8125138b7704a16e88a8a89898c8a60405161195996959493929190614657565b60405180910390a2505050505050505050565b61197d611977611d21565b83611de2565b6119bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b390614214565b60405180910390fd5b6119c8848484846129bf565b50505050565b60606119d982611cb5565b6119e257600080fd5b60006119ed83610db2565b905060c960008281526020019081526020016000206002018054611a1090613fba565b80601f0160208091040260200160405190810160405280929190818152602001828054611a3c90613fba565b8015611a895780601f10611a5e57610100808354040283529160200191611a89565b820191906000526020600020905b815481529060010190602001808311611a6c57829003601f168201915b5050505050915050919050565b611aa2338484846124b1565b505050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611b43611d21565b73ffffffffffffffffffffffffffffffffffffffff16611b616112ca565b73ffffffffffffffffffffffffffffffffffffffff1614611bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bae90614280565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1e90614731565b60405180910390fd5b611c3081612127565b50565b60cb6020528060005260406000206000915090505481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d9c83610e03565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611ded82611cb5565b611e2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e23906147c3565b60405180910390fd5b6000611e3783610e03565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e795750611e788185611aa7565b5b80611eb757508373ffffffffffffffffffffffffffffffffffffffff16611e9f846108e7565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611ee082610e03565b73ffffffffffffffffffffffffffffffffffffffff1614611f36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2d90614855565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9d906148e7565b60405180910390fd5b611fb1838383612a1b565b611fbc600082611d29565b6001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461200c9190614907565b925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612063919061493b565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612122838383612a20565b505050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060019054906101000a900460ff16156122645760018260ff1614801561221c575061221a30612a25565b155b61225b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225290614a03565b60405180910390fd5b600090506122d8565b8160ff1660008054906101000a900460ff1660ff16106122b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b090614a03565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff1661232c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232390614a95565b60405180910390fd5b612334612a48565b565b600060019054906101000a900460ff16612385576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237c90614a95565b60405180910390fd5b61238f8282612aa9565b5050565b606081601f836123a3919061493b565b10156123e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123db90614b01565b60405180910390fd5b81836123f0919061493b565b84511015612433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242a90614b6d565b60405180910390fd5b606082156000811461245457604051915060008252602082016040526124a5565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156124925780518352602083019250602081019050612475565b50868552601f19601f8301166040525050505b50809150509392505050565b600060c9600085815260200190815260200160002060030160029054906101000a900461ffff1661ffff167f000000000000000000000000000000000000000000000000000000000000000061ffff1660c96000878152602001908152602001600020600601546125229190614b8d565b61252c919061493b565b9050600160c9600086815260200190815260200160002060030160028282829054906101000a900461ffff166125629190614be7565b92506101000a81548161ffff021916908361ffff16021790555060c9600085815260200190815260200160002060030160009054906101000a900461ffff1661ffff1660c9600086815260200190815260200160002060030160029054906101000a900461ffff1661ffff16111561260f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260690614c91565b60405180910390fd5b6000151561261c83611414565b15151461265e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265590614cfd565b60405180910390fd5b600160ca60008480519060200120815260200190815260200160002060006101000a81548160ff0219169083151502179055506126d360c9600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858585612b2a565b612712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270990614d69565b60405180910390fd5b61271c8582612bb1565b60c96000858152602001908152602001600020600401543414612774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276b90614dd5565b60405180910390fd5b60c9600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156127f0573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff16847f858f7f381d57a58f2e65ea21be7a4da2bd2f3937ea0ceba485140ba8719efb048386868051906020012060405161284393929190614df5565b60405180910390a35050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156128c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b890614e78565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516129b291906135b0565b60405180910390a3505050565b6129ca848484611ec0565b6129d684848484612bcf565b612a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0c90614f0a565b60405180910390fd5b50505050565b505050565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8e90614a95565b60405180910390fd5b612aa7612aa2611d21565b612127565b565b600060019054906101000a900460ff16612af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aef90614a95565b60405180910390fd5b8160659080519060200190612b0e929190613459565b508060669080519060200190612b25929190613459565b505050565b600080612b378585611255565b90506000612b43612d66565b82604051602001612b55929190614fa2565b6040516020818303038152906040528051906020012090508673ffffffffffffffffffffffffffffffffffffffff16612b8e8286612e39565b73ffffffffffffffffffffffffffffffffffffffff161492505050949350505050565b612bcb828260405180602001604052806000815250612e60565b5050565b6000612bf08473ffffffffffffffffffffffffffffffffffffffff16612a25565b15612d59578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612c19611d21565b8786866040518563ffffffff1660e01b8152600401612c3b949392919061502e565b602060405180830381600087803b158015612c5557600080fd5b505af1925050508015612c8657506040513d601f19601f82011682018060405250810190612c83919061508f565b60015b612d09573d8060008114612cb6576040519150601f19603f3d011682016040523d82523d6000602084013e612cbb565b606091505b50600081511415612d01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf890614f0a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612d5e565b600190505b949350505050565b6000804690507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600f81526020017f446574726f69744c6f63616c4172740000000000000000000000000000000000815250805190602001206040518060400160405280600381526020017f312e300000000000000000000000000000000000000000000000000000000000815250805190602001208330604051602001612e1d9594939291906150f7565b6040516020818303038152906040528051906020012091505090565b6000806000612e488585612ebb565b91509150612e5581612f3e565b819250505092915050565b612e6a8383613113565b612e776000848484612bcf565b612eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ead90614f0a565b60405180910390fd5b505050565b600080604183511415612efd5760008060006020860151925060408601519150606086015160001a9050612ef1878285856132ed565b94509450505050612f37565b604083511415612f2e576000806020850151915060408501519050612f238683836133fa565b935093505050612f37565b60006002915091505b9250929050565b60006004811115612f5257612f5161514a565b5b816004811115612f6557612f6461514a565b5b1415612f7057613110565b60016004811115612f8457612f8361514a565b5b816004811115612f9757612f9661514a565b5b1415612fd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fcf906151c5565b60405180910390fd5b60026004811115612fec57612feb61514a565b5b816004811115612fff57612ffe61514a565b5b1415613040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161303790615231565b60405180910390fd5b600360048111156130545761305361514a565b5b8160048111156130675761306661514a565b5b14156130a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161309f906152c3565b60405180910390fd5b6004808111156130bb576130ba61514a565b5b8160048111156130ce576130cd61514a565b5b141561310f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161310690615355565b60405180910390fd5b5b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317a906153c1565b60405180910390fd5b61318c81611cb5565b156131cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131c39061542d565b60405180910390fd5b6131d860008383612a1b565b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613228919061493b565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46132e960008383612a20565b5050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156133285760006003915091506133f1565b601b8560ff16141580156133405750601c8560ff1614155b156133525760006004915091506133f1565b600060018787878760405160008152602001604052604051613377949392919061545c565b6020604051602081039080840390855afa158015613399573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156133e8576000600192509250506133f1565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c61343d919061493b565b905061344b878288856132ed565b935093505050935093915050565b82805461346590613fba565b90600052602060002090601f01602090048101928261348757600085556134ce565b82601f106134a057805160ff19168380011785556134ce565b828001600101855582156134ce579182015b828111156134cd5782518255916020019190600101906134b2565b5b5090506134db91906134df565b5090565b5b808211156134f85760008160009055506001016134e0565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61354581613510565b811461355057600080fd5b50565b6000813590506135628161353c565b92915050565b60006020828403121561357e5761357d613506565b5b600061358c84828501613553565b91505092915050565b60008115159050919050565b6135aa81613595565b82525050565b60006020820190506135c560008301846135a1565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156136055780820151818401526020810190506135ea565b83811115613614576000848401525b50505050565b6000601f19601f8301169050919050565b6000613636826135cb565b61364081856135d6565b93506136508185602086016135e7565b6136598161361a565b840191505092915050565b6000602082019050818103600083015261367e818461362b565b905092915050565b6000819050919050565b61369981613686565b81146136a457600080fd5b50565b6000813590506136b681613690565b92915050565b6000602082840312156136d2576136d1613506565b5b60006136e0848285016136a7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613714826136e9565b9050919050565b61372481613709565b82525050565b600060208201905061373f600083018461371b565b92915050565b6000819050919050565b61375881613745565b811461376357600080fd5b50565b6000813590506137758161374f565b92915050565b60006020828403121561379157613790613506565b5b600061379f84828501613766565b91505092915050565b600061ffff82169050919050565b6137bf816137a8565b82525050565b6137ce81613686565b82525050565b6137dd81613745565b82525050565b6000610100820190506137f9600083018b61371b565b613806602083018a61371b565b8181036040830152613818818961362b565b905061382760608301886137b6565b61383460808301876137b6565b61384160a08301866137c5565b61384e60c08301856137d4565b61385b60e08301846137c5565b9998505050505050505050565b61387181613709565b811461387c57600080fd5b50565b60008135905061388e81613868565b92915050565b600080604083850312156138ab576138aa613506565b5b60006138b98582860161387f565b92505060206138ca858286016136a7565b9150509250929050565b6000806000606084860312156138ed576138ec613506565b5b60006138fb8682870161387f565b935050602061390c8682870161387f565b925050604061391d868287016136a7565b9150509250925092565b6000806040838503121561393e5761393d613506565b5b600061394c85828601613766565b925050602061395d8582860161387f565b9150509250929050565b600060208201905061397c60008301846137d4565b92915050565b60006020828403121561399857613997613506565b5b60006139a68482850161387f565b91505092915050565b60006020820190506139c460008301846137c5565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613a0c8261361a565b810181811067ffffffffffffffff82111715613a2b57613a2a6139d4565b5b80604052505050565b6000613a3e6134fc565b9050613a4a8282613a03565b919050565b600067ffffffffffffffff821115613a6a57613a696139d4565b5b613a738261361a565b9050602081019050919050565b82818337600083830152505050565b6000613aa2613a9d84613a4f565b613a34565b905082815260208101848484011115613abe57613abd6139cf565b5b613ac9848285613a80565b509392505050565b600082601f830112613ae657613ae56139ca565b5b8135613af6848260208601613a8f565b91505092915050565b60008060408385031215613b1657613b15613506565b5b6000613b2485828601613766565b925050602083013567ffffffffffffffff811115613b4557613b4461350b565b5b613b5185828601613ad1565b9150509250929050565b613b64816137a8565b8114613b6f57600080fd5b50565b600081359050613b8181613b5b565b92915050565b60008060408385031215613b9e57613b9d613506565b5b6000613bac85828601613766565b9250506020613bbd85828601613b72565b9150509250929050565b600067ffffffffffffffff821115613be257613be16139d4565b5b613beb8261361a565b9050602081019050919050565b6000613c0b613c0684613bc7565b613a34565b905082815260208101848484011115613c2757613c266139cf565b5b613c32848285613a80565b509392505050565b600082601f830112613c4f57613c4e6139ca565b5b8135613c5f848260208601613bf8565b91505092915050565b600060208284031215613c7e57613c7d613506565b5b600082013567ffffffffffffffff811115613c9c57613c9b61350b565b5b613ca884828501613c3a565b91505092915050565b613cba81613595565b8114613cc557600080fd5b50565b600081359050613cd781613cb1565b92915050565b60008060408385031215613cf457613cf3613506565b5b6000613d028582860161387f565b9250506020613d1385828601613cc8565b9150509250929050565b60008060408385031215613d3457613d33613506565b5b6000613d4285828601613766565b9250506020613d53858286016136a7565b9150509250929050565b600080600060608486031215613d7657613d75613506565b5b6000613d848682870161387f565b9350506020613d9586828701613b72565b9250506040613da686828701613766565b9150509250925092565b60008060008060008060c08789031215613dcd57613dcc613506565b5b6000613ddb89828a0161387f565b9650506020613dec89828a0161387f565b955050604087013567ffffffffffffffff811115613e0d57613e0c61350b565b5b613e1989828a01613ad1565b9450506060613e2a89828a01613b72565b9350506080613e3b89828a016136a7565b92505060a0613e4c89828a01613766565b9150509295509295509295565b60008060008060808587031215613e7357613e72613506565b5b6000613e818782880161387f565b9450506020613e928782880161387f565b9350506040613ea3878288016136a7565b925050606085013567ffffffffffffffff811115613ec457613ec361350b565b5b613ed087828801613c3a565b91505092959194509250565b600080600060608486031215613ef557613ef4613506565b5b6000613f0386828701613766565b9350506020613f1486828701613b72565b925050604084013567ffffffffffffffff811115613f3557613f3461350b565b5b613f4186828701613c3a565b9150509250925092565b60008060408385031215613f6257613f61613506565b5b6000613f708582860161387f565b9250506020613f818582860161387f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613fd257607f821691505b60208210811415613fe657613fe5613f8b565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614048602c836135d6565b915061405382613fec565b604082019050919050565b600060208201905081810360008301526140778161403b565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006140da6021836135d6565b91506140e58261407e565b604082019050919050565b60006020820190508181036000830152614109816140cd565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b600061416c6038836135d6565b915061417782614110565b604082019050919050565b6000602082019050818103600083015261419b8161415f565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006141fe6031836135d6565b9150614209826141a2565b604082019050919050565b6000602082019050818103600083015261422d816141f1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061426a6020836135d6565b915061427582614234565b602082019050919050565b600060208201905081810360008301526142998161425d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061430982613686565b915061431483613686565b925082614324576143236142a0565b5b828204905092915050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b600061438b6029836135d6565b91506143968261432f565b604082019050919050565b600060208201905081810360008301526143ba8161437e565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600061441d602a836135d6565b9150614428826143c1565b604082019050919050565b6000602082019050818103600083015261444c81614410565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061448f61448a61448584614453565b61446a565b61445d565b9050919050565b61449f81614474565b82525050565b60006020820190506144ba6000830184614496565b92915050565b60006060820190506144d560008301866137d4565b6144e260208301856137d4565b6144ef60408301846137b6565b949350505050565b7f7369676e6174757265206c656e67746820696e76616c69640000000000000000600082015250565b600061452d6018836135d6565b9150614538826144f7565b602082019050919050565b6000602082019050818103600083015261455c81614520565b9050919050565b6000606082019050614578600083018661371b565b61458560208301856137b6565b61459260408301846137d4565b949350505050565b7f4172742070726f6a65637420696420616c72656164792072656769737465726560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006145f66021836135d6565b91506146018261459a565b604082019050919050565b60006020820190508181036000830152614625816145e9565b9050919050565b6000614637826137a8565b915061ffff82141561464c5761464b6142cf565b5b600182019050919050565b600060c08201905061466c600083018961371b565b614679602083018861371b565b61468660408301876137b6565b61469360608301866137c5565b81810360808301526146a5818561362b565b90506146b460a08301846137d4565b979650505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061471b6026836135d6565b9150614726826146bf565b604082019050919050565b6000602082019050818103600083015261474a8161470e565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006147ad602c836135d6565b91506147b882614751565b604082019050919050565b600060208201905081810360008301526147dc816147a0565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061483f6025836135d6565b915061484a826147e3565b604082019050919050565b6000602082019050818103600083015261486e81614832565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006148d16024836135d6565b91506148dc82614875565b604082019050919050565b60006020820190508181036000830152614900816148c4565b9050919050565b600061491282613686565b915061491d83613686565b9250828210156149305761492f6142cf565b5b828203905092915050565b600061494682613686565b915061495183613686565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614986576149856142cf565b5b828201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006149ed602e836135d6565b91506149f882614991565b604082019050919050565b60006020820190508181036000830152614a1c816149e0565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614a7f602b836135d6565b9150614a8a82614a23565b604082019050919050565b60006020820190508181036000830152614aae81614a72565b9050919050565b7f736c6963655f6f766572666c6f77000000000000000000000000000000000000600082015250565b6000614aeb600e836135d6565b9150614af682614ab5565b602082019050919050565b60006020820190508181036000830152614b1a81614ade565b9050919050565b7f736c6963655f6f75744f66426f756e6473000000000000000000000000000000600082015250565b6000614b576011836135d6565b9150614b6282614b21565b602082019050919050565b60006020820190508181036000830152614b8681614b4a565b9050919050565b6000614b9882613686565b9150614ba383613686565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614bdc57614bdb6142cf565b5b828202905092915050565b6000614bf2826137a8565b9150614bfd836137a8565b92508261ffff03821115614c1457614c136142cf565b5b828201905092915050565b7f546f74616c20737570706c7920686173206265656e206d696e74656420666f7260008201527f20746869732070726f6a6563742e000000000000000000000000000000000000602082015250565b6000614c7b602e836135d6565b9150614c8682614c1f565b604082019050919050565b60006020820190508181036000830152614caa81614c6e565b9050919050565b7f436f646520616c72656164792075736564000000000000000000000000000000600082015250565b6000614ce76011836135d6565b9150614cf282614cb1565b602082019050919050565b60006020820190508181036000830152614d1681614cda565b9050919050565b7f5369676e617475726520696e76616c6964000000000000000000000000000000600082015250565b6000614d536011836135d6565b9150614d5e82614d1d565b602082019050919050565b60006020820190508181036000830152614d8281614d46565b9050919050565b7f496e76616c6964207061796d656e7420666f72206d696e740000000000000000600082015250565b6000614dbf6018836135d6565b9150614dca82614d89565b602082019050919050565b60006020820190508181036000830152614dee81614db2565b9050919050565b6000606082019050614e0a60008301866137c5565b614e1760208301856137b6565b614e2460408301846137d4565b949350505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614e626019836135d6565b9150614e6d82614e2c565b602082019050919050565b60006020820190508181036000830152614e9181614e55565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614ef46032836135d6565b9150614eff82614e98565b604082019050919050565b60006020820190508181036000830152614f2381614ee7565b9050919050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000614f6b600283614f2a565b9150614f7682614f35565b600282019050919050565b6000819050919050565b614f9c614f9782613745565b614f81565b82525050565b6000614fad82614f5e565b9150614fb98285614f8b565b602082019150614fc98284614f8b565b6020820191508190509392505050565b600081519050919050565b600082825260208201905092915050565b600061500082614fd9565b61500a8185614fe4565b935061501a8185602086016135e7565b6150238161361a565b840191505092915050565b6000608082019050615043600083018761371b565b615050602083018661371b565b61505d60408301856137c5565b818103606083015261506f8184614ff5565b905095945050505050565b6000815190506150898161353c565b92915050565b6000602082840312156150a5576150a4613506565b5b60006150b38482850161507a565b91505092915050565b6000819050919050565b60006150e16150dc6150d7846150bc565b61446a565b613686565b9050919050565b6150f1816150c6565b82525050565b600060a08201905061510c60008301886150e8565b61511960208301876137d4565b61512660408301866137d4565b61513360608301856137c5565b615140608083018461371b565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006151af6018836135d6565b91506151ba82615179565b602082019050919050565b600060208201905081810360008301526151de816151a2565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061521b601f836135d6565b9150615226826151e5565b602082019050919050565b6000602082019050818103600083015261524a8161520e565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006152ad6022836135d6565b91506152b882615251565b604082019050919050565b600060208201905081810360008301526152dc816152a0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061533f6022836135d6565b915061534a826152e3565b604082019050919050565b6000602082019050818103600083015261536e81615332565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006153ab6020836135d6565b91506153b682615375565b602082019050919050565b600060208201905081810360008301526153da8161539e565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615417601c836135d6565b9150615422826153e1565b602082019050919050565b600060208201905081810360008301526154468161540a565b9050919050565b6154568161445d565b82525050565b600060808201905061547160008301876137d4565b61547e602083018661544d565b61548b60408301856137d4565b61549860608301846137d4565b9594505050505056fea26469706673582212202dbdc8a4f13ec8694bbc05854950ecb39110c364135fc87607ed652fd79f2b4e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1601,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2255,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 294,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 296,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 300,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 304,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 308,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 314,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1155,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2760,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "artProjects",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(ArtProject)2709_storage)"
      },
      {
        "astId": 2764,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "usedSignatureHashes",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2768,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "projectIdLookup",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 2770,
        "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
        "label": "projectCount",
        "offset": 0,
        "slot": "204",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(ArtProject)2709_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DetroitLocalArt.ArtProject)",
        "numberOfBytes": "32",
        "value": "t_struct(ArtProject)2709_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ArtProject)2709_storage": {
        "encoding": "inplace",
        "label": "struct DetroitLocalArt.ArtProject",
        "members": [
          {
            "astId": 2694,
            "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
            "label": "signerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2696,
            "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
            "label": "payoutAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2698,
            "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
            "label": "metadataURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2700,
            "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
            "label": "totalSupply",
            "offset": 0,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 2702,
            "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
            "label": "mintedCount",
            "offset": 2,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 2704,
            "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
            "label": "mintPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2706,
            "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
            "label": "projectSeed",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 2708,
            "contract": "contracts/DetroitLocalArt.sol:DetroitLocalArt",
            "label": "projectIndex",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}